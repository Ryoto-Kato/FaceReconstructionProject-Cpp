#include "bfm_manager.h"

#include <fstream>
#include <iostream>
#include <array>
#include <memory>
#include <boost/filesystem.hpp>
#include <boost/program_options.hpp>

namespace fs = boost::filesystem;
namespace po = boost::program_options;


const std::string LOG_PATH = R"(./log)";


int main(int argc, char *argv[])
{
    // logging
    google::InitGoogleLogging(argv[0]); 
    FLAGS_logtostderr = false;
    if(fs::exists(LOG_PATH)) 
        fs::remove_all(LOG_PATH);
    fs::create_directory(LOG_PATH);
    FLAGS_alsologtostderr = true;
    FLAGS_log_dir = LOG_PATH;
    FLAGS_log_prefix = true; 
    FLAGS_colorlogtostderr =true;

    // command options
    po::options_description opts("Options");
    po::variables_map vm;

    std::string sBfmH5Path, sLandmarkIdxPath;
	double dFx = 0.0, dFy = 0.0, dCx = 0.0, dCy = 0.0;
    sBfmH5Path = "/home/ryotok/Documents/TUM/SS23/FP_3DSM/BFM_basic_pipeline/Data/model2017-1_bfm_nomouth.h5";
    sLandmarkIdxPath = "/home/ryotok/Documents/TUM/SS23/FP_3DSM/BFM_basic_pipeline/Data/map_dlib-bfm_rk.anl";
    dFx = 1744.327628674942;
    dFy = 1747.838275588676;
    dCx = 800;
    dCy = 600;

    try
    {
        po::store(po::parse_command_line(argc, argv, opts), vm);
    }
    catch(...)
    {
        LOG(ERROR) << "These exists undefined command options.";
        return -1;
    }

    po::notify(vm);
    if(vm.count("help"))
    {
        LOG(INFO) << opts;
        return 0;
    }

	std::array<double, N_INT_PARAMS> aIntParams = { dFx, dFy, dCx, dCy };
	std::unique_ptr<BfmManager> pBfmManager(new BfmManager(sBfmH5Path, aIntParams, sLandmarkIdxPath));

    //only write ply to visualize landmarks
    pBfmManager->writeLandmarkPly("landmarks.ply");

    //Set parameters
    // Coefficients for shape (199dim)
    std::vector<double> _coef_shape = {1.35982, 4.58154, -0.144497, -5.60332, 0.0526005, 3.72205, -4.73335, 2.58471, 0.199888, 1.13355, -1.71451, 2.48621, -2.35147, -2.73202, -3.08397, -0.461363, -0.648689, 2.35612, 1.89773, -5.25898, 2.43594, -0.858787, -1.251, 1.14865, 4.48174, -0.543897, 2.25787, -3.51808, 3.35158, 0.757921, -3.79997, -0.192129, -1.22736, 1.57217, -1.46639, -5.86647, 1.74459, -3.33895, -0.554571, -0.914844, -0.213381, 5.30319, -0.455774, -2.91975, 6.91567, -3.33744, -1.96792, -0.618775, 1.08693, 4.48546, 3.61086, 2.27854, -2.39703, -1.70969, -0.559681, -0.332884, -1.94077, -0.131853, 2.4651, -0.795658, -1.92196, 0.227778, 7.95127, 1.32237, 7.73176, 1.94919, -0.972522, -2.42813, 3.07547, 1.78916, 1.73506, -3.17724, 3.47924, 0.504941, 5.09847, 0.965697, 0.156934, 3.10021, -5.67475, 0.186958, 2.0241, 2.60911, -0.00164837, 3.56536, 2.95706, -0.949758, 1.34018, -0.917555, -2.89864, -4.10212, -0.0647675, -0.0760473, -1.09079, 4.78679, -1.00966, -0.951466, -1.12815, -1.81088, 1.14092, -0.634901, 4.19393, -0.154778, -0.24172, -2.68672, -0.261226, 1.37849, 2.96354, -0.954373, -2.06333, -1.49177, -2.86876, -3.49933, 2.10861, -1.83566, -0.651453, -1.04734, 5.02986, 2.2641, -3.05282, 1.78832, 4.33105, 2.99618, -5.23611, 3.34163, 0.528679, -0.570485, 0.569117, 1.5007, 5.01634, -0.0640699, 1.54914, 3.06658, -0.928706, 0.749098, -1.33337, 0.680119, -3.28307, 5.44081, -3.97985, 1.51229, -1.74412, 0.584966, -5.18306, 0.670043, -0.0892343, 1.27419, 0.364499, -3.59402, -2.84663, -1.0695, -0.672312, 0.780548, -2.09034, -1.32798, 1.78423, -0.903917, -4.78654, -5.35615, 1.20542, 1.62399, 2.41616, -3.0187, 1.12814, -0.75492, 0.81099, -2.48641, -1.11013, 6.17187, -2.24184, -2.07369, 2.678, -1.39893, -4.37047, 1.63268, -1.67336, -3.05079, -6.13043, 0.60356, -0.57444, 1.38333, -5.78597, -1.77023, 3.77638, -0.127266, -0.0265435, -6.00795, 1.44405, 0.656326, -2.53438, -2.87057, 2.14332, -1.57009, 4.84567, 1.66648, -1.80637, 1.53991, 3.13979, -7.00785, 1.84581};
    // Coefficient for texture (199dim)
    std::vector<double> _coef_tex = {-0.939461, 0.807407, 0.0418675, -0.218482, 0.0777038, 0.0646725, 0.132211, 0.39221, -0.275034, 0.366957, 0.103293, -0.240571, 0.516328, -0.376104, 0.485397, -0.231068, -0.487349, 0.470209, -0.789866, 0.0262927, -0.424657, 0.693524, 0.0495422, -1.24146, -0.067015, -0.817428, 0.131106, 0.536999, 0.400566, -1.11455, -0.738186, 0.609291, -0.14634, -0.00507975, -0.0104612, -0.577561, -0.284545, -0.00201202, -0.338924, -0.532313, -1.00337, 0.808154, 0.0622376, 0.601659, 0.395609, -1.00979, -0.569426, -0.168853, 0.00367227, -0.147915, 0.939562, -0.13469, 0.0402932, 0.723185, 0.784846, -0.348009, -0.226573, -0.263135, -0.222904, 0.190179, 0.220754, 0.402016, -0.648363, 0.760669, 0.592709, -0.293168, -0.0339384, -0.0523662, -0.0152403, -0.685043, 0.386356, -0.64661, -0.223204, -0.720214, 0.106663, -0.226485, 0.943473, -0.399918, -1.05839, -0.280164, -0.548844, 0.500835, -0.46445, -0.221159, -0.272483, 0.541268, -0.180583, -0.335298, -0.753914, -0.945244, -0.51114, -0.755218, -0.578613, -0.00774594, -0.303722, -0.0712457, -0.0139913, 0.209496, 1.16992, 0.397189, 0.716339, 0.325273, -1.1157, -0.82799, -0.517678, -1.24194, 0.832834, 0.741728, -0.227121, -0.769922, 0.591518, -0.240251, 0.104513, 0.681891, 0.884008, -0.118074, -0.460336, 0.309614, 0.198575, -0.0223547, 0.621338, 0.334244, -0.00417056, 0.570264, -0.747836, 0.286313, -0.872641, 0.517807, 1.20792, 0.224479, -0.123916, -0.79099, -0.160249, 0.847176, -0.0720962, -0.586694, -0.0337559, -0.656616, -0.0854957, -1.25917, 0.676657, -0.0300606, -0.243738, 0.373281, 1.09505, -0.352706, 1.29842, -0.28218, 0.116789, -0.917646, -0.224453, -0.85551, -0.147545, 0.221046, 0.498491, -0.450215, 0.00495127, -0.912007, -0.194967, -0.248033, -0.74021, -0.275011, 0.386151, 0.0129647, -0.760389, -0.632965, 0.395228, -0.0788702, 0.777731, 0.0283813, 1.14026, -0.228086, 1.43991, -0.162239, 0.163396, 0.289925, 0.730762, -0.266334, -0.567568, -0.0414544, -0.165757, -1.34601, 0.138388, -0.480812, -0.995689, 0.929929, 0.0384844, 0.997379, 0.18316, -0.296618, -0.820188, -0.0731485, -0.384338, 0.931458, 0.297943, -0.744139, -0.257288, -0.0732985, 0.0552113};
    // Coefficient for expression (100dim)
    std::vector<double> _coef_exp = {11.3374, 2.44871, -5.99074, -18.9872, -5.36523, -6.2764, 0.53041, -7.79239, -1.96074, -15.5227, 8.21945, -12.7702, -18.4999, -2.93109, 5.00704, -1.27637, -5.90443, 14.1714, 2.52635, -12.1914, 3.16813, -1.80571, -10.7359, -17.9292, 15.2891, -9.20363, 15.0162, -7.0286, -11.9358, -0.555989, 1.67004, 3.87914, 6.08795, -29.9548, -8.82591, 1.98812, 7.47898, -1.22874, 10.9333, 2.68102, -3.35986, -25.1599, 1.23945, 18.3727, -1.35911, -0.973086, -15.6635, -4.91787, -2.61834, 9.72942, 15.4732, -3.6071, 12.6738, 6.95635, -2.91557, -14.5656, 11.8064, 4.95562, -0.374053, -18.5464, 22.795, -14.699, -7.73759, -1.4603, -5.30734, 5.84564, -1.80436, -13.0589, 3.81386, 3.8884, 8.46354, 7.07323, 5.46616, -4.14932, 0.243558, -8.94014, -16.9855, -15.5014, 19.802, 12.0139, 2.16118, -5.32768, -0.198337, 1.00697, -4.13545, -13.4812, 1.89751, 15.6549, -26.5154, -9.25689, -3.53476, -6.65138, -6.62823, -6.50278, -0.0138376, -6.12104, -3.75787, -0.140608, -0.355656, 4.21447, 1.39903e-76, 7.22447e-319, 6.91885e-310, 6.91885e-310, 0, 0, 2.73824e-57, 1.25581e-71, 1.96853e-62, 8.45647e-53, 6.00881e-67, 4.90844e-62, 8.23009e-67, 1.96901e-62, 8.45647e-53, 2.58076e-57, 8.60389e-67, 5.39367e-62, 1.96948e-62, 8.45647e-53, 1.69133e-52, 0.0128043, 0.00596755, 7.21578e-319, 6.91885e-310, 6.91885e-310, 0, 0, 0.00303313, 0.00376866, -0.00136818, -0.00417858, 0.00171282, -0.00242932, -0.00195849, 0.00187856, -0.00271982, 0.00353114, 0.00248918, 0.00292816, -0.00306505, 0.00398941, 0.00624225, -0.00170832, 0.000614037, -0.000126155, 0.00459356, 0.00125464, 0.00021783, 0.00269477, -0.00261323, -0.000806692, 0.000821131, -0.00125206, -0.000478634, 0.00416324, -0.00326521, 0.0044226, -0.000398405, -0.00082073, 0.0016555, 0.00157285, -0.00105725, 0.00283297, -0.00290057, 0.00186884, -0.00352523, -0.000961668, 0.00296762, -0.0011689, -0.00044035, 0.00149902, 0.0024702, 0.00603372, 0.000235578, 0.0014762, 0.00378563, -0.00229269, -0.00255276, 0.00189145, -0.0013241, 7.42636e-05, 0.00178432, -0.000511041, -0.0032341, 0.00126664, -0.000841016, -0.00518234, -0.000423453, 0.000156569, -0.00417452, -0.00204696, 0.00130668, -0.00334365, -0.00134949, 0.000463921, -0.000575882, -0.000866226, -0.00137122};
    
    // if you want to output average face _average == true, otherwise false
    // above given coefficients will be neglected,
    bool _average = true;
    // if you want to output face geometry with given expression _withExp == true, otherwise false
    bool _withExp = false;

    // Set the file name as you want.
    // you will find the .ply in build
    pBfmManager->GetBFM("test1.ply", _coef_shape, _coef_tex, _coef_exp, _average, _withExp);
    
    //How to get principal components, variances, and mu for shape, identity, and texture
    VectorXd vec_Mu_Shape;
    VectorXd vec_Ev_Shape;
    MatrixXd mat_Pc_Shape;
    VectorXd vec_Mu_Tex;
    VectorXd vec_Ev_Tex;
    MatrixXd mat_Pc_Tex;
    VectorXd vec_Mu_Exp;
    VectorXd vec_Ev_Exp;
    MatrixXd mat_Pc_Exp;

    pBfmManager->GetShapeComponents(vec_Mu_Shape, vec_Ev_Shape, mat_Pc_Shape);
    pBfmManager->GetTexComponents(vec_Mu_Tex, vec_Ev_Tex, mat_Pc_Tex);
    pBfmManager->GetExpComponents(vec_Mu_Exp, vec_Ev_Exp, mat_Pc_Exp);

    // vec_Mu_Shape = pBfmManager->get_ShapeMu();

    // You can test if you successfully obtain the principal components, variances, and mu
    // std::cout<<"vec_Mu_Shape"<<std::endl;
    // std::cout<<vec_Mu_Shape<<std::endl;
    // std::cout<<"vec_EV_Shape"<<std::endl;
    // std::cout<<vec_Ev_Shape<<std::endl;
    // std::cout<<"vec_Pc_Shape"<<std::endl;
    // // std::cout<<mat_Pc_Shape<<std::endl;

    // std::cout<<"vec_Mu_Tex"<<std::endl;
    // std::cout<<vec_Mu_Tex<<std::endl;
    // std::cout<<"vec_EV_Tex"<<std::endl;
    // std::cout<<vec_Ev_Tex<<std::endl;
    // std::cout<<"vec_Pc_Tex"<<std::endl;
    // // std::cout<<mat_Pc_Tex<<std::endl;

    // std::cout<<"vec_Mu_Exp"<<std::endl;
    // std::cout<<vec_Mu_Exp<<std::endl;
    // std::cout<<"vec_EV_Exp"<<std::endl;
    // std::cout<<vec_Ev_Exp<<std::endl;
    // std::cout<<"vec_Pc_Exp"<<std::endl;
    // // std::cout<<mat_Pc_Exp<<std::endl;


	google::ShutdownGoogleLogging();
	return 0;
}
